# Importing the packages

import tensorflow as tf
import numpy as np
import mnist          # the module that contains the handwritten digit images
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import to_categorical

# Loading the data

train_images = mnist.train_images()
train_labels = mnist.train_labels()
test_images = mnist.test_images()
test_labels = mnist.test_labels()

# Normalize pixel values from [0, 255] to [-0.5, 0.5]

train_images = (train_images/255) - 0.5
test_images = (test_images/255) - 0.5

# Flatten the images from 28x28 image to a 784 dimensional vector

train_images = train_images.reshape((-1, 784))
test_images = test_images.reshape((-1, 784))

# Prints the shapes of the train/test sets

print(train_images.shape)
print(test_images.shape)

# Building the model
# It contains 2 hidden layers with 64 neurons each using the relu function 
# and the output layer with 10 neurons with the softmax function 

model = Sequential()
model.add(Dense(64, activation='relu', input_dim = 784))
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))

# Compile the model
# Loss function measures how well the model did on training
# Based on the loss func. score it tries to improve the model using the optimizer

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics = ['accuracy']
)

# Fitting the model on the train set

model.fit(
    train_images,
    to_categorical(train_labels),
    epochs = 5,
    batch_size=32,
)

# Evaluate the model

model.evaluate(
    test_images,
    to_categorical(test_labels)
)

model.save_weights('model.h5') # saving the model

# Predict on the first 50 test images
# Because it has an accuracy of 0.96 - 0.98 it won't give wrong values in the first 50s
# So this is just for checking

y = model.predict(test_images)
predictions = np.argmax(y, axis = 1)
print(predictions[:50])
print(test_labels[:50])

# This outputs the first 10 images it got wrong
# It prints the predicted value, the expected value and than the image itself

cnt = 0
for i in range(0, 10000):  
  if not(predictions[i] == test_labels[i]) and cnt<10:
    print(predictions[i], " ", test_labels[i])
    first_image = test_images[i]
    first_image = np.array(first_image, dtype='float')
    pixels = first_image.reshape((28, 28))
    plt.imshow(pixels)
    plt.show()
    cnt = cnt + 1
